def egcd(b: int, n: int):
  x0, x1, y0, y1 = (1, 0, 0, 1)

  while n != 0:
    (q, b, n) = (b // n, n, b % n)
    (x0, x1) = (x1, x0 - q * x1)
    (y0, y1) = (y1, y0 - q * y1)

  return b, x0, y0


# https://crypto.stackexchange.com/questions/1614/rsa-cracking-the-same-message-is-sent-to-two-different-people-problem

c1 = 0xac33f30b8d0d0d37061b2cbcc04576980c1f1cb7c8985ab96e33099fa550c62e0c6ca11cf41a0c99003a0e6836afe35bf38dbb72c3775c3427e01dda8f1f3534dfc9d2b34e2c7fb22b13de4d6a33089fca86cdd973bf67406a9a427919a9292ab104460a1ceb7b5997db4753ad707c476c2298f2ce82b4294759a1509a072dee99cdcf8209753081365fa9de2fc1edcbf2c6991b8c6c0bd748d0af01d2525941ee180f6da779666610aff4716d4d12f799d8c256b45cc913cfa9bba74a426041521fde3f881e9170e4de60d145ea6991b824d71a24e50bcf5a48a1b622de79b2419a4bd52a7c31ca10e49c878add3321f5a377d7e3d723f43914ac5ce465c67e
e1 = 0x486e97ce92764b888459df824b2b10f9000000003efbe01344850cfbef81

c2 = 0x93581f2f2a2b4ce7a46e5f9bb58bfafd353d909f3c79e82581e21bf288baa868be69213203e1d858b91cdabe310b59cee592ca051528efd358dced50cc36b7a30763d124eb4eb1ba3f45ec70d14bc4db3181418b808bff2249088b98fd09c99e1bf755fa8565caed3260f0026ad98141a41ea204e92db142da42dbf5bc1ba334a69e4e1cae90f1de457fc8e154d84149a3e5c0518d6e7e79590a013bbf6a0a6922ffcdbf44a905181959aaebfd300311b13b599ee7c4c881a07c697f9031eee1adf6699ead93348e3c8f436e84453af89c6e8e874b7cce3dc86033e17f191b87dfd3369e3bf290c112654910779d72203c2fbfe76319106766ee51a8c8101270
e2 = 0x00b07552f858480774942a0431cd95df2b0000000000003efbe01344850cfbef81

n = 0x00b4e4d8e6cc49a6de4c02f19c4ab88c5b7ad030e4a9a4546ffe8b2303c469a218b66dbaad9bcb2a429c65f59268ac27fe85108ec1df50a3b7e258cf2a885971a9cb3be4daa715859db59d6af0a3d0f2eb142577e2e570300ddf681ff5245bba5f9b309fa39528dd7af5bf4cc5915aa868593c81699015497972e2f28beba4b5ab092b0415af4c5c9d6f54748b678563c8631180a5afe19f1f41141ddfde3840be434dde3623c9fa2214d8bdb0e521331ce558dd5ce816b873045e37dd1548869b238d0010344258f1d3cee8e31f659be93ac3afb273922e3cc46c72b7ac3fe407448156f85108ceeeb6f5da97df30b12660fbc59abfa750bf18a210ffccfa4855


_, a, b = egcd(e1, e2)
i = pow(c2, -1, n)
m = (pow(c1, a, n) * pow(i, -b, n)) % n
# m = (pow(c1, a, n) * pow(i, -b, n) * pow(c2, b, n)) % n

print(m)
print(m.to_bytes((m.bit_length() + 7)).strip(b'\x00'))

# Nouveau digicode de la salle RC-25 : d10f05c916560f1d0afd2353a6ce2e6e
