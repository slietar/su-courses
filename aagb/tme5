import numpy as np
from matplotlib import pyplot as plt
from dataclasses import dataclass
from pathlib import Path
from scipy.optimize import curve_fit


@dataclass
class Graph:
  matrix: np.ndarray

  def degrees(self):
    return self.matrix.sum(axis=0)

  @classmethod
  def parse(cls, file):
    edges = set[tuple[int, int]]()
    vertex_names = list[str]()
    vertex_count = 0

    def get_vertex(name: str):
      if name in vertex_names:
        return vertex_names.index(name)
      
      vertex = len(vertex_names)
      vertex_names.append(name)
      return vertex

    for raw_line in file.readlines():
      line = raw_line.strip()

      if line:
        a, b = [get_vertex(x) for x in line.split(',')]
        edges.add((a, b))
        vertex_count = max(vertex_count, a + 1, b + 1)
    
    matrix = np.zeros((vertex_count, vertex_count), dtype=bool)

    for a, b in edges:
      matrix[a, b] = True
      matrix[b, a] = True
    
    return Graph(matrix)
    

for name in ['reseau1', 'reseau2', 'reseau3']:
  with Path(f'{name}.txt').open() as file:
    graph = Graph.parse(file)

  fig, ax = plt.subplots()

  degrees = graph.degrees()

  power = lambda x, gamma: x ** -gamma
  hist, bin_edges = h = np.histogram(degrees)
  hist = np.maximum(hist, 1)

  bin_centers = (bin_edges[:-1] + bin_edges[1:]) * 0.5
  gamma, pcov = curve_fit(power, bin_centers, hist) #, bounds=[1e-4, 10000])
  print(gamma, pcov)

  ax.hist(degrees, bins=(degrees.max() - degrees.min()))
  # ax.set_yscale('log')

  s = np.array([0, bin_centers[-1]])
  ax.plot(s, power(s, gamma))
  fig.savefig(f'out_{name}.png')
